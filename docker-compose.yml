# Docker Compose 서비스 정의
services:
  # MySQL 데이터베이스 서비스
  db:
    image: mysql:8.0 # MySQL 8.0 버전 이미지 사용
    environment: # MySQL 환경 변수 설정
      MYSQL_ROOT_PASSWORD: rootpassword # root 사용자의 비밀번호
      MYSQL_DATABASE: mydb # 생성할 기본 데이터베이스 이름
    ports:
      - "3306:3306" # 호스트의 3306 포트와 컨테이너의 3306 포트 연결
    networks:
      - mynetwork # mynetwork 네트워크에 연결
    restart: always # 컨테이너 자동 재시작 설정

  # Node.js 백엔드 서비스
  backend:
    build: . # 현재 디렉토리의 Dockerfile을 사용하여 이미지 빌드
    environment: # 백엔드 서비스의 환경 변수 설정
      - DB_HOST=db # 데이터베이스 호스트 (서비스 이름 사용)
      - DB_USER=root # 데이터베이스 사용자
      - DB_PASSWORD=rootpassword # 데이터베이스 비밀번호
      - DB_NAME=mydb # 사용할 데이터베이스 이름
    ports:
      - "5000:5000" # 호스트의 5000 포트와 컨테이너의 5000 포트 연결
    entrypoint: # 컨테이너 시작 시 실행할 명령어
      ["/usr/local/bin/wait-for-it.sh", "db:3306", "--", "npm", "start"] # DB 준비 될 때까지 대기 후 서버 시작
    depends_on:
      - db # db 서비스가 먼저 시작되어야 함
    networks:
      - mynetwork # mynetwork 네트워크에 연결
    restart: always # 컨테이너 자동 재시작 설정

  # phpMyAdmin 서비스 (데이터베이스 관리 웹 인터페이스)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin # phpMyAdmin 공식 이미지 사용
    ports:
      - "8080:80" # 호스트의 8080 포트와 컨테이너의 80 포트 연결
    environment: # phpMyAdmin 환경 변수 설정
      - PMA_HOST=db # 연결할 MySQL 호스트
      - PMA_USER=root # MySQL 사용자
      - PMA_PASSWORD=rootpassword # MySQL 비밀번호
    depends_on:
      - db # db 서비스가 먼저 시작되어야 함
    networks:
      - mynetwork # mynetwork 네트워크에 연결
    restart: always # 컨테이너 자동 재시작 설정

  # Nginx 웹 서버 서비스 (리버스 프록시 및 정적 파일 서빙)
  nginx:
    image: nginx:latest # 최신 버전의 Nginx 공식 이미지 사용
    ports:
      - "80:80" # 호스트의 80 포트와 컨테이너의 80 포트 연결 (HTTP)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일을 읽기 전용으로 마운트
    depends_on:
      - backend # 백엔드 서비스가 먼저 시작되어야 함
    networks:
      - mynetwork # 다른 서비스들과 통신하기 위한 네트워크 연결
    restart: always # 컨테이너 자동 재시작 설정

  # Webhook 리스너 서비스
  webhook:
    build: .
    command: npm run webhook
    ports:
      - "9000:9000"
    volumes:
      - .:/app
      - /app/node_modules
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.env:/app/.env:ro
      - ${PROJECT_DIR}:${PROJECT_DIR}  # 프로젝트 디렉토리를 동일한 경로로 마운트
    environment:
      - WEBHOOK_SECRET=your-webhook-secret
      - PROJECT_DIR=${PROJECT_DIR}  # 환경변수 전달
    restart: always
    networks:
      - mynetwork

# Docker 네트워크 정의
networks:
  mynetwork: # 서비스들 간의 통신을 위한 네트워크
    driver: bridge # bridge 네트워크 드라이버 사용
